#pragma once

#include <unistd.h>
#include <fcntl.h>

#include <functional>
#include <string_view>
#include <optional>
#include <vector>

#include "hoytech-cpp/hoytech/error.h"
#include "hoytech-cpp/hoytech/time.h"
#include "lmdbxx/lmdb++.h"
#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/minireflect.h"

#include "[% db %].schema_generated.h"


[% INCLUDE utils.h.tt %]

[% includes %]


namespace [% db %] {



class environment {
  public:
    environment() {}
    environment(const environment &) = delete;
    environment &operator=(environment const &) = delete;
    environment(environment &&) = delete;
    environment &operator=(environment &&) = delete;


    bool envInited = false;
    [% env.vars %]


    // Table definitions

    [% FOREACH table IN tables.keys %]
      lmdb::dbi dbi_[% table %];

      [% FOREACH indexName IN tables.$table.indices.keys %]
        lmdb::dbi dbi_[% table %]__[% indexName %];
      [% END %]
    [% END %]

    [% FOREACH table IN tablesRaw.keys %]
      lmdb::dbi dbi_[% table %];
    [% END %]

    lmdb::dbi lookupDbi(std::string_view name) {
        if (!envInited) throw hoytech::error("rasgueadb environment not yet opened");

        [% FOREACH table IN tables.keys %]
            if (name == "[% table %]") return dbi_[% table %];
            [% FOREACH indexName IN tables.$table.indices.keys %]
                if (name == "[% table %]__[% indexName %]") return dbi_[% table %]__[% indexName %];
            [% END %]
        [% END %]

        throw hoytech::error("unknown table name: ", name);
    }


    // Open and init environment

    lmdb::env lmdb_env = lmdb::env::create();

    void open(std::string dir, bool setDefaults = true, unsigned int flags = 0) {
        if (envInited) throw hoytech::error("rasgueadb environment already opened");

        if (setDefaults) {
            lmdb_env.set_max_dbs(64);
            lmdb_env.set_max_readers(252);
            lmdb_env.set_mapsize(1UL * 1024UL * 1024UL * 1024UL * 1024UL);
        }

        lmdb_env.open(dir.c_str(), MDB_CREATE | flags, 0664);

        lmdb_env.reader_check();


        if (fcntl(lmdb_env.get_fd(), F_SETFD, FD_CLOEXEC) == -1) throw hoytech::error("unable to enable CLOEXEC on LMDB fd");


        auto txn = txn_rw();

        [% FOREACH table IN tables.keys %]
          dbi_[% table %] = lmdb::dbi::open(txn, "rasgueadb_[% db %]__[% table %]", MDB_CREATE | MDB_INTEGERKEY);

          [% FOREACH index IN tables.$table.indices.keys %]
            dbi_[% table %]__[% index %] = lmdb::dbi::open(txn, "rasgueadb_[% db %]__[% table %]__[% index %]", MDB_CREATE | MDB_DUPSORT | MDB_INTEGERDUP | MDB_DUPFIXED [% IF tables.$table.indices.$index.integer %]| MDB_INTEGERKEY[% END %]);
            [% IF tables.$table.indices.$index.comparator %]dbi_[% table %]__[% index %].set_compare(txn, lmdb_comparator__[% tables.$table.indices.$index.comparator %]);[% END %]
          [% END %]
        [% END %]

        [% FOREACH table IN tablesRaw.keys %]
          dbi_[% table %] = lmdb::dbi::open(txn, "rasgueadb_[% db %]__[% table %]", MDB_CREATE | ([% tablesRaw.$table.flags || '0' %]));
        [% END %]

        {
            [% env.setup %]
        }

        txn.commit();

        envInited = true;
    }

    void copy_fd(int fd) { lmdb::env_copy_fd(lmdb_env, fd, MDB_CP_COMPACT); }



    // Transactions

    lmdb::txn txn_rw(MDB_txn* parentTxn = nullptr) {
        return lmdb::txn::begin(lmdb_env, parentTxn, 0);
    }

    lmdb::txn txn_ro(MDB_txn* parentTxn = nullptr) {
        return lmdb::txn::begin(lmdb_env, parentTxn, MDB_RDONLY);
    }


    // Key utilities

    uint64_t get_integer_key_or_zero(lmdb::cursor &cursor, MDB_cursor_op cursorOp = MDB_LAST) {
        uint64_t id;

        std::string_view k, v;

        if (cursor.get(k, v, cursorOp)) {
            id = lmdb::from_sv<uint64_t>(k);
        } else {
            id = 0;
        }

        return id;
    }

    uint64_t get_first_integer_key_or_zero(lmdb::txn &txn, lmdb::dbi &dbi) {
        auto cursor = lmdb::cursor::open(txn, dbi);
        return get_integer_key_or_zero(cursor, MDB_FIRST);
    }

    uint64_t get_largest_integer_key_or_zero(lmdb::txn &txn, lmdb::dbi &dbi) {
        auto cursor = lmdb::cursor::open(txn, dbi);
        return get_integer_key_or_zero(cursor, MDB_LAST);
    }

    uint64_t get_next_integer_key(lmdb::txn &txn, lmdb::dbi &dbi) {
        return get_largest_integer_key_or_zero(txn, dbi) + 1;
    }



    // Misc utilities

    std::vector<std::string_view> views(const std::vector<std::string> &inp) {
        std::vector<std::string_view> output;
        for (auto &i : inp) output.push_back(i);
        return output;
    }



    // Includes

    [% INCLUDE view.h.tt %]
    [% INCLUDE modify.h.tt %]
    [% INCLUDE lookup.h.tt %]
    [% INCLUDE iteration.h.tt %]
};




}
