// Iteration methods

inline void generic_foreachRaw(lmdb::txn &txn, lmdb::dbi &dbi, std::function<bool(std::string_view, std::string_view)> cb, bool reverse = false, std::optional<std::string_view> startingPoint = std::nullopt, bool skipDups = false) {
    auto cursor = lmdb::cursor::open(txn, dbi);

    std::string_view k, v;

    if (startingPoint) {
        k = *startingPoint;

        if (reverse) {
            if (!cursor.get(k, v, MDB_SET_RANGE)) {
                if (!cursor.get(k, v, MDB_LAST)) return;
            } else {
                if (k != *startingPoint) cursor.get(k, v, MDB_PREV);
            }
        } else {
            if (!cursor.get(k, v, MDB_SET_RANGE)) return;
        }

        if (!cursor.get(k, v, MDB_SET_RANGE)) return;
    } else {
        if (!cursor.get(k, v, reverse ? MDB_LAST : MDB_FIRST)) return;
    }

    MDB_cursor_op traversal;

    if (reverse) {
        traversal = skipDups ? MDB_PREV_NODUP : MDB_PREV;
    } else {
        traversal = skipDups ? MDB_NEXT_NODUP : MDB_NEXT;
    }

    do {
        if (!cb(k, v)) return;
    } while (cursor.get(k, v, traversal));
}

inline bool generic_foreachFull(lmdb::txn &txn, lmdb::dbi &dbi, std::string_view startingPoint, std::string_view startingPointDup, std::function<bool(std::string_view, std::string_view)> cb, bool reverse = false) {
    auto cursor = lmdb::cursor::open(txn, dbi);

    std::string_view k = startingPoint, v = startingPointDup;

    if (reverse) {
        if (cursor.get(k, v, MDB_GET_BOTH_RANGE)) {
            if (v != startingPointDup) {
                if (!cursor.get(k, v, MDB_PREV)) return true;
            }
        } else {
            if (cursor.get(k, v, MDB_SET)) {
                if (!cursor.get(k, v, MDB_LAST_DUP)) return true;
            } else {
                if (cursor.get(k, v, MDB_SET_RANGE)) {
                    if (!cursor.get(k, v, MDB_PREV)) return true;
                } else {
                    if (!cursor.get(k, v, MDB_LAST)) return true;
                }
            }
        }
    } else {
        if (!cursor.get(k, v, MDB_GET_BOTH_RANGE)) {
            if (cursor.get(k, v, MDB_SET)) {
                if (!cursor.get(k, v, MDB_NEXT_NODUP)) return true;
            } else {
                if (!cursor.get(k, v, MDB_SET_RANGE)) return true;
                if (!cursor.get(k, v, MDB_FIRST_DUP)) return true;
            }
        }
    }

    MDB_cursor_op traversal = reverse ? MDB_PREV : MDB_NEXT;

    do {
        if (!cb(k, v)) return false;
    } while (cursor.get(k, v, traversal));

    return true;
}


inline void generic_foreach(lmdb::txn &txn, lmdb::dbi &dbi, std::function<bool(uint64_t, std::string_view)> cb, bool reverse = false, uint64_t startingPoint = 0) {
    generic_foreachRaw(txn, dbi, [&cb](std::string_view k, std::string_view v){ return cb(lmdb::from_sv<uint64_t>(k), v); }, reverse, startingPoint ? std::optional<std::string_view>(lmdb::to_sv<uint64_t>(startingPoint)) : std::nullopt);
}



inline void generic_foreachByIndex(lmdb::txn &txn, lmdb::dbi &tableDbi, lmdb::dbi &indexDbi, std::optional<std::string_view> startKey, std::optional<std::string_view> indexKey, std::function<bool(uint64_t, std::string_view, std::string_view)> cb, bool reverse = false, uint64_t *count = nullptr) {
    if (count) *count = 0;

    auto cursorT = lmdb::cursor::open(txn, tableDbi);
    auto cursorI = lmdb::cursor::open(txn, indexDbi);

    std::string_view k, v;

    if (startKey) {
        k = *startKey;

        if (!cursorI.get(k, v, MDB_SET_RANGE)) return;

        if (reverse && k != *startKey) cursorI.get(k, v, MDB_PREV);
    } else if (indexKey) {
        k = *indexKey;
        if (!cursorI.get(k, v, MDB_SET)) return;

        cursorI.get(k, v, reverse ? MDB_LAST_DUP : MDB_FIRST_DUP);
    } else {
        if (!cursorI.get(k, v, reverse ? MDB_LAST : MDB_FIRST)) return;
    }

    if (count) {
        if (indexKey) {
            *count = cursorI.count();
        } else {
            *count = indexDbi.size(txn);
        }
    }

    do {
        uint64_t primaryKey = lmdb::from_sv<uint64_t>(v);
        std::string_view recordKey = lmdb::to_sv<uint64_t>(primaryKey), record;
        if (cursorT.get(recordKey, record, MDB_SET)) {
            if (!cb(primaryKey, record, k)) return;
        } else {
            //throw hoytech::error("broken index");
        }
    } while (cursorI.get(k, v, reverse ? (indexKey ? MDB_PREV_DUP : MDB_PREV) : (indexKey ? MDB_NEXT_DUP : MDB_NEXT)));
}


inline void generic_foreachDup(lmdb::txn &txn, lmdb::dbi &tableDbi, lmdb::dbi &indexDbi, std::string_view k, std::function<bool(uint64_t, std::string_view)> cb, bool reverse = false, uint64_t startingPoint = 0, uint64_t *count = nullptr, bool allow_dangling = false) {
    std::string_view v;

    if (count) *count = 0;

    auto cursorT = lmdb::cursor::open(txn, tableDbi);
    auto cursorI = lmdb::cursor::open(txn, indexDbi);

    if (startingPoint) {
        v = lmdb::to_sv<uint64_t>(startingPoint);

        if (reverse) {
            if (!cursorI.get(k, v, MDB_GET_BOTH_RANGE)) {
                if (!cursorI.get(k, v, MDB_SET)) return;
                if (!cursorI.get(k, v, MDB_LAST_DUP)) return;
            } else {
                uint64_t curr = lmdb::from_sv<uint64_t>(v);
                if (curr > startingPoint) {
                    if (!cursorI.get(k, v, MDB_PREV_DUP)) return;
                }
            }
        } else {
            if (!cursorI.get(k, v, MDB_GET_BOTH_RANGE)) return;
        }
    } else {
        if (!cursorI.get(k, v, MDB_SET)) return;

        if (reverse) cursorI.get(k, v, MDB_LAST_DUP);
        else cursorI.get(k, v, MDB_FIRST_DUP);
    }

    if (count) *count = cursorI.count();

    do {
        uint64_t primaryKey = lmdb::from_sv<uint64_t>(v);
        std::string_view recordKey = lmdb::to_sv<uint64_t>(primaryKey);
        std::string_view record;
        if (cursorT.get(recordKey, record, MDB_SET)) {
            if (!cb(primaryKey, record)) return;
        } else {
            if (!allow_dangling) throw hoytech::error("broken index");
        }
    } while (cursorI.get(k, v, reverse ? MDB_PREV_DUP : MDB_NEXT_DUP));
}






[% FOREACH table IN tables.keys %]

inline void foreach_[% table %](lmdb::txn &txn, std::function<bool(View_[% table %]&)> cb, bool reverse = false, uint64_t startingPoint = 0) {
    generic_foreach(txn, dbi_[% table %], [&cb](uint64_t primaryKey, std::string_view v){
        View_[% table %] view(primaryKey, v);
        return cb(view);
    }, reverse, startingPoint);
}


[% FOREACH indexName IN tables.$table.indices.keys.sort() %]
[% indexDef = tables.$table.indices.$indexName %]

inline void foreach_[% table %]__[% indexName %](lmdb::txn &txn, std::function<bool(View_[% table %]&, std::string_view)> cb, bool reverse = false, std::optional<[% utils.index_name_to_type(indexDef) %]> startKey = std::nullopt, uint64_t *count = nullptr) {
    generic_foreachByIndex(txn, dbi_[% table %], dbi_[% table %]__[% indexName %], startKey ? std::optional<std::string_view>([% utils.index_conversion(indexDef) %](*startKey)) : std::nullopt, std::nullopt, [&](uint64_t primaryKeyId, std::string_view v, std::string_view indexKey){
        View_[% table %] view(primaryKeyId, v);
        return cb(view, indexKey);
    }, reverse, count);
}

inline void foreach_[% table %]__[% indexName %](lmdb::txn &txn, std::function<bool(View_[% table %]&)> cb, bool reverse = false, std::optional<[% utils.index_name_to_type(indexDef) %]> startKey = std::nullopt, uint64_t *count = nullptr) {
    foreach_[% table %]__[% indexName %](txn, [&](auto &view, std::string_view){ return cb(view); }, reverse, startKey, count);
}

inline void foreachDup_[% table %]__[% indexName %](lmdb::txn &txn, [% utils.index_name_to_type(indexDef) %] k, std::function<bool(View_[% table %]&)> cb, bool reverse = false, std::optional<uint64_t> startingPoint = std::nullopt, uint64_t *count = nullptr) {
    generic_foreachDup(txn, dbi_[% table %], dbi_[% table %]__[% indexName %], [% utils.index_conversion(indexDef) %](k), [&cb](uint64_t primaryKeyId, std::string_view v){
        View_[% table %] view(primaryKeyId, v);
        return cb(view);
    }, reverse, startingPoint ? *startingPoint : 0, count);
}

inline void foreachKey_[% table %]__[% indexName %](lmdb::txn &txn, std::function<bool([% utils.index_name_to_type(indexDef) %] k)> cb, bool reverse = false, std::optional<std::string_view> startKey = std::nullopt) {
    generic_foreachRaw(txn, dbi_[% table %]__[% indexName %], [&cb](std::string_view k, std::string_view){ return cb([% utils.index_conversion_rev(indexDef) %](k)); }, reverse, startKey, true);
}

[% END %]

[% END %]
