// Iteration methods

inline void generic_foreach_raw(lmdb::txn &txn, lmdb::dbi &dbi, std::function<bool(std::string_view, std::string_view)> cb, bool reverse = false, uint64_t startingPoint = 0, std::function<void()> onStartingPointNotFound = [](){}) {
    auto cursor = lmdb::cursor::open(txn, dbi);

    std::string_view k, v;

    if (startingPoint) {
        k = lmdb::to_sv<uint64_t>(startingPoint);
        if (!cursor.get(k, v, MDB_SET)) {
            onStartingPointNotFound();
            return;
        }
    } else {
        if (!cursor.get(k, v, reverse ? MDB_LAST : MDB_FIRST)) return;
    }

    do {
        if (!cb(k, v)) return;
    } while (cursor.get(k, v, reverse ? MDB_PREV : MDB_NEXT));
}


inline void generic_foreach(lmdb::txn &txn, lmdb::dbi &dbi, std::function<bool(uint64_t, std::string_view)> cb, bool reverse = false, uint64_t startingPoint = 0) {
    generic_foreach_raw(txn, dbi, [&cb](std::string_view k, std::string_view v){ return cb(lmdb::from_sv<uint64_t>(k), v); }, reverse, startingPoint);
}


inline void generic_foreach_index(lmdb::txn &txn, lmdb::dbi &tableDbi, lmdb::dbi &indexDbi, std::string_view k, std::function<bool(uint64_t, std::string_view)> cb, bool reverse = false, uint64_t startingPoint = 0, uint64_t *count = nullptr, bool allow_dangling = false) {
    std::string_view v;

    if (count) *count = 0;

    auto cursorT = lmdb::cursor::open(txn, tableDbi);
    auto cursorI = lmdb::cursor::open(txn, indexDbi);

    if (startingPoint) {
        v = lmdb::to_sv<uint64_t>(startingPoint);
        if (!cursorI.get(k, v, MDB_GET_BOTH_RANGE)) return;

        uint64_t curr = lmdb::from_sv<uint64_t>(v);

        if (reverse && curr > startingPoint) cursorI.get(k, v, MDB_PREV_DUP);
        else if (!reverse && curr < startingPoint) cursorI.get(k, v, MDB_NEXT_DUP);
    } else {
        if (!cursorI.get(k, v, MDB_SET)) return;

        if (reverse) cursorI.get(k, v, MDB_LAST_DUP);
        else cursorI.get(k, v, MDB_FIRST_DUP);
    }

    if (count) *count = cursorI.count();

    do {
        uint64_t primaryKey = lmdb::from_sv<uint64_t>(v);
        std::string_view recordKey = lmdb::to_sv<uint64_t>(primaryKey);
        std::string_view record;
        if (cursorT.get(recordKey, record, MDB_SET)) {
            if (!cb(primaryKey, record)) return;
        } else {
            if (!allow_dangling) throw hoytech::error("broken index");
        }
    } while (cursorI.get(k, v, reverse ? MDB_PREV_DUP : MDB_NEXT_DUP));
}


inline void foreach_by_index(lmdb::txn &txn, lmdb::dbi &tableDbi, lmdb::dbi &indexDbi, std::optional<std::string_view> startKey, std::optional<std::string_view> indexKey, std::function<bool(uint64_t, std::string_view)> cb, bool reverse = false, uint64_t *count = nullptr) {
    if (count) *count = 0;

    auto cursorT = lmdb::cursor::open(txn, tableDbi);
    auto cursorI = lmdb::cursor::open(txn, indexDbi);

    std::string_view k, v;

    if (startKey) {
        k = *startKey;

        if (!cursorI.get(k, v, MDB_SET_RANGE)) return;

        // count is not supported: always 0
    } else if (indexKey) {
        k = *indexKey;
        if (!cursorI.get(k, v, MDB_SET)) return;

        cursorI.get(k, v, reverse ? MDB_LAST_DUP : MDB_FIRST_DUP);

        if (count) *count = cursorI.count();
    } else {
        if (!cursorI.get(k, v, reverse ? MDB_LAST : MDB_FIRST)) return;

        if (count) *count = indexDbi.size(txn);
    }

    do {
        uint64_t primaryKey = lmdb::from_sv<uint64_t>(v);
        std::string_view recordKey = lmdb::to_sv<uint64_t>(primaryKey), record;
        if (cursorT.get(recordKey, record, MDB_SET)) {
            if (!cb(primaryKey, record)) return;
        } else {
            //throw hoytech::error("broken index");
        }
    } while (cursorI.get(k, v, reverse ? (indexKey ? MDB_PREV_DUP : MDB_PREV) : (indexKey ? MDB_NEXT_DUP : MDB_NEXT)));
}




[% FOREACH table IN tables.keys %]

inline void foreach_[% table %](lmdb::txn &txn, std::function<bool(View_[% table %]&)> cb, bool reverse = false, uint64_t startingPoint = 0) {
    generic_foreach(txn, dbi_[% table %], [&cb](uint64_t primaryKey, std::string_view v){
        View_[% table %] view(primaryKey, v);
        return cb(view);
    }, reverse, startingPoint);
}


[% FOREACH indexName IN tables.$table.indices.keys %]
[% index = tables.$table.indices.$indexName %]

inline void foreach_[% table %]__[% indexName %](lmdb::txn &txn, std::function<bool(View_[% table %]&)> cb, std::optional<std::string_view> startKey = std::nullopt, bool reverse = false, uint64_t *count = nullptr) {
    foreach_by_index(txn, dbi_[% table %], dbi_[% table %]__[% indexName %], startKey, std::nullopt, [&](uint64_t primaryKeyId, std::string_view v){
        View_[% table %] view(primaryKeyId, v);
        return cb(view);
    }, reverse, count);
}

inline void foreachDup_[% table %]__[% indexName %](lmdb::txn &txn, std::string_view k, std::function<bool(View_[% table %]&)> cb, bool reverse = false, uint64_t startingPoint = 0, uint64_t *count = nullptr) {
    generic_foreach_index(txn, dbi_[% table %], dbi_[% table %]__[% indexName %], k, [&cb](uint64_t primaryKeyId, std::string_view v){
        View_[% table %] view(primaryKeyId, v);
        return cb(view);
    }, reverse, startingPoint, count);
}

[% END %]

[% END %]
